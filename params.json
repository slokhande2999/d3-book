{"name":"D3-book","tagline":"Sample code files to accompany the book “Interactive Data Visualization for the Web”","body":"<!DOCTYPE html>\r\n<meta charset=\"utf-8\">\r\n<style>\r\n\r\ncircle,\r\npath {\r\n  cursor: pointer;\r\n}\r\n\r\ncircle {\r\n  fill: none;\r\n  pointer-events: all;\r\n}\r\n\r\n</style>\r\n<body>\r\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\r\n<script>\r\n\r\nvar margin = {top: 350, right: 480, bottom: 350, left: 480},\r\n    radius = Math.min(margin.top, margin.right, margin.bottom, margin.left) - 10;\r\n\r\nvar hue = d3.scale.category10();\r\n\r\nvar luminance = d3.scale.sqrt()\r\n    .domain([0, 1e6])\r\n    .clamp(true)\r\n    .range([90, 20]);\r\n\r\nvar svg = d3.select(\"body\").append(\"svg\")\r\n    .attr(\"width\", margin.left + margin.right)\r\n    .attr(\"height\", margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\nvar partition = d3.layout.partition()\r\n    .sort(function(a, b) { return d3.ascending(a.name, b.name); })\r\n    .size([2 * Math.PI, radius]);\r\n\r\nvar arc = d3.svg.arc()\r\n    .startAngle(function(d) { return d.x; })\r\n    .endAngle(function(d) { return d.x + d.dx - .01 / (d.depth + .5); })\r\n    .innerRadius(function(d) { return radius / 3 * d.depth; })\r\n    .outerRadius(function(d) { return radius / 3 * (d.depth + 1) - 1; });\r\n\r\nd3.json(\"/mbostock/raw/4063550/flare.json\", function(error, root) {\r\n\r\n  // Compute the initial layout on the entire tree to sum sizes.\r\n  // Also compute the full name and fill color for each node,\r\n  // and stash the children so they can be restored as we descend.\r\n  partition\r\n      .value(function(d) { return d.size; })\r\n      .nodes(root)\r\n      .forEach(function(d) {\r\n        d._children = d.children;\r\n        d.sum = d.value;\r\n        d.key = key(d);\r\n        d.fill = fill(d);\r\n      });\r\n\r\n  // Now redefine the value function to use the previously-computed sum.\r\n  partition\r\n      .children(function(d, depth) { return depth < 2 ? d._children : null; })\r\n      .value(function(d) { return d.sum; });\r\n\r\n  var center = svg.append(\"circle\")\r\n      .attr(\"r\", radius / 3)\r\n      .on(\"click\", zoomOut);\r\n\r\n  center.append(\"title\")\r\n      .text(\"zoom out\");\r\n\r\n  var path = svg.selectAll(\"path\")\r\n      .data(partition.nodes(root).slice(1))\r\n    .enter().append(\"path\")\r\n      .attr(\"d\", arc)\r\n      .style(\"fill\", function(d) { return d.fill; })\r\n      .each(function(d) { this._current = updateArc(d); })\r\n      .on(\"click\", zoomIn);\r\n\r\n  function zoomIn(p) {\r\n    if (p.depth > 1) p = p.parent;\r\n    if (!p.children) return;\r\n    zoom(p, p);\r\n  }\r\n\r\n  function zoomOut(p) {\r\n    if (!p.parent) return;\r\n    zoom(p.parent, p);\r\n  }\r\n\r\n  // Zoom to the specified new root.\r\n  function zoom(root, p) {\r\n    if (document.documentElement.__transition__) return;\r\n\r\n    // Rescale outside angles to match the new layout.\r\n    var enterArc,\r\n        exitArc,\r\n        outsideAngle = d3.scale.linear().domain([0, 2 * Math.PI]);\r\n\r\n    function insideArc(d) {\r\n      return p.key > d.key\r\n          ? {depth: d.depth - 1, x: 0, dx: 0} : p.key < d.key\r\n          ? {depth: d.depth - 1, x: 2 * Math.PI, dx: 0}\r\n          : {depth: 0, x: 0, dx: 2 * Math.PI};\r\n    }\r\n\r\n    function outsideArc(d) {\r\n      return {depth: d.depth + 1, x: outsideAngle(d.x), dx: outsideAngle(d.x + d.dx) - outsideAngle(d.x)};\r\n    }\r\n\r\n    center.datum(root);\r\n\r\n    // When zooming in, arcs enter from the outside and exit to the inside.\r\n    // Entering outside arcs start from the old layout.\r\n    if (root === p) enterArc = outsideArc, exitArc = insideArc, outsideAngle.range([p.x, p.x + p.dx]);\r\n\r\n    path = path.data(partition.nodes(root).slice(1), function(d) { return d.key; });\r\n\r\n    // When zooming out, arcs enter from the inside and exit to the outside.\r\n    // Exiting outside arcs transition to the new layout.\r\n    if (root !== p) enterArc = insideArc, exitArc = outsideArc, outsideAngle.range([p.x, p.x + p.dx]);\r\n\r\n    d3.transition().duration(d3.event.altKey ? 7500 : 750).each(function() {\r\n      path.exit().transition()\r\n          .style(\"fill-opacity\", function(d) { return d.depth === 1 + (root === p) ? 1 : 0; })\r\n          .attrTween(\"d\", function(d) { return arcTween.call(this, exitArc(d)); })\r\n          .remove();\r\n\r\n      path.enter().append(\"path\")\r\n          .style(\"fill-opacity\", function(d) { return d.depth === 2 - (root === p) ? 1 : 0; })\r\n          .style(\"fill\", function(d) { return d.fill; })\r\n          .on(\"click\", zoomIn)\r\n          .each(function(d) { this._current = enterArc(d); });\r\n\r\n      path.transition()\r\n          .style(\"fill-opacity\", 1)\r\n          .attrTween(\"d\", function(d) { return arcTween.call(this, updateArc(d)); });\r\n    });\r\n  }\r\n});\r\n\r\nfunction key(d) {\r\n  var k = [], p = d;\r\n  while (p.depth) k.push(p.name), p = p.parent;\r\n  return k.reverse().join(\".\");\r\n}\r\n\r\nfunction fill(d) {\r\n  var p = d;\r\n  while (p.depth > 1) p = p.parent;\r\n  var c = d3.lab(hue(p.name));\r\n  c.l = luminance(d.sum);\r\n  return c;\r\n}\r\n\r\nfunction arcTween(b) {\r\n  var i = d3.interpolate(this._current, b);\r\n  this._current = i(0);\r\n  return function(t) {\r\n    return arc(i(t));\r\n  };\r\n}\r\n\r\nfunction updateArc(d) {\r\n  return {depth: d.depth, x: d.x, dx: d.dx};\r\n}\r\n\r\nd3.select(self.frameElement).style(\"height\", margin.top + margin.bottom + \"px\");\r\n\r\n</script>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}